{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8d507d4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "GRIB_centre: ecmf\n",
      "GRIB_centreDescription: European Centre for Medium-Range Weather Forecasts\n",
      "GRIB_subCentre: 0\n",
      "Conventions: CF-1.7\n",
      "institution: European Centre for Medium-Range Weather Forecasts\n",
      "history: 2025-04-14T06:46 GRIB to CDM+CF via cfgrib-0.9.15.0/ecCodes-2.39.0 with {\"source\": \"tmp2rlghxcr/data.grib\", \"filter_by_keys\": {\"stream\": [\"oper\"], \"stepType\": [\"instant\"]}, \"encode_cf\": [\"parameter\", \"time\", \"geography\", \"vertical\"]}\n",
      "\n",
      "Dimensions:\n",
      "valid_time: size=1\n",
      "latitude: size=721\n",
      "longitude: size=1440\n",
      "\n",
      "Variables:\n",
      "number: (), int64\n",
      "valid_time: ('valid_time',), int64\n",
      "latitude: ('latitude',), float64\n",
      "longitude: ('longitude',), float64\n",
      "expver: (), <class 'str'>\n",
      "z: ('valid_time', 'latitude', 'longitude'), float32\n",
      "lsm: ('valid_time', 'latitude', 'longitude'), float32\n",
      "slt: ('valid_time', 'latitude', 'longitude'), float32\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"static.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40ae2d60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "GRIB_centre: ecmf\n",
      "GRIB_centreDescription: European Centre for Medium-Range Weather Forecasts\n",
      "GRIB_subCentre: 0\n",
      "Conventions: CF-1.7\n",
      "institution: European Centre for Medium-Range Weather Forecasts\n",
      "history: 2025-05-05T08:03 GRIB to CDM+CF via cfgrib-0.9.15.0/ecCodes-2.39.0 with {\"source\": \"tmp5fhde7w6/data.grib\", \"filter_by_keys\": {\"stream\": [\"oper\"], \"stepType\": [\"instant\"]}, \"encode_cf\": [\"parameter\", \"time\", \"geography\", \"vertical\"]}\n",
      "\n",
      "Dimensions:\n",
      "valid_time: size=4\n",
      "latitude: size=721\n",
      "longitude: size=1440\n",
      "\n",
      "Variables:\n",
      "number: (), int64\n",
      "valid_time: ('valid_time',), int64\n",
      "latitude: ('latitude',), float64\n",
      "longitude: ('longitude',), float64\n",
      "expver: ('valid_time',), <class 'str'>\n",
      "t2m: ('valid_time', 'latitude', 'longitude'), float32\n",
      "u10: ('valid_time', 'latitude', 'longitude'), float32\n",
      "v10: ('valid_time', 'latitude', 'longitude'), float32\n",
      "msl: ('valid_time', 'latitude', 'longitude'), float32\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"2023-01-01-surface-level.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "40b0f4a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "GRIB_centre: ecmf\n",
      "GRIB_centreDescription: European Centre for Medium-Range Weather Forecasts\n",
      "GRIB_subCentre: 0\n",
      "Conventions: CF-1.7\n",
      "institution: European Centre for Medium-Range Weather Forecasts\n",
      "history: 2025-05-05T08:04 GRIB to CDM+CF via cfgrib-0.9.15.0/ecCodes-2.39.0 with {\"source\": \"tmp_m3vtasm/data.grib\", \"filter_by_keys\": {\"stream\": [\"oper\"], \"stepType\": [\"instant\"]}, \"encode_cf\": [\"parameter\", \"time\", \"geography\", \"vertical\"]}\n",
      "\n",
      "Dimensions:\n",
      "valid_time: size=4\n",
      "pressure_level: size=13\n",
      "latitude: size=721\n",
      "longitude: size=1440\n",
      "\n",
      "Variables:\n",
      "number: (), int64\n",
      "valid_time: ('valid_time',), int64\n",
      "pressure_level: ('pressure_level',), float64\n",
      "latitude: ('latitude',), float64\n",
      "longitude: ('longitude',), float64\n",
      "expver: ('valid_time',), <class 'str'>\n",
      "t: ('valid_time', 'pressure_level', 'latitude', 'longitude'), float32\n",
      "u: ('valid_time', 'pressure_level', 'latitude', 'longitude'), float32\n",
      "v: ('valid_time', 'pressure_level', 'latitude', 'longitude'), float32\n",
      "q: ('valid_time', 'pressure_level', 'latitude', 'longitude'), float32\n",
      "z: ('valid_time', 'pressure_level', 'latitude', 'longitude'), float32\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"2023-01-01-atmospheric.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "06916490",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "\n",
      "Dimensions:\n",
      "time: size=1416\n",
      "lat: size=36\n",
      "lon: size=60\n",
      "pfull: size=28\n",
      "latu: size=36\n",
      "lonv: size=60\n",
      "phalf: size=29\n",
      "\n",
      "Variables:\n",
      "Ls: ('time',), float64\n",
      "MY: ('time',), float64\n",
      "Surface_geopotential: ('lat', 'lon'), float64\n",
      "T: ('time', 'pfull', 'lat', 'lon'), float64\n",
      "U: ('time', 'pfull', 'latu', 'lon'), float64\n",
      "V: ('time', 'pfull', 'lat', 'lonv'), float64\n",
      "ak: ('phalf',), float32\n",
      "bk: ('phalf',), float32\n",
      "earth_day: ('time',), float64\n",
      "earth_hour: ('time',), float64\n",
      "earth_minute: ('time',), float64\n",
      "earth_month: ('time',), float64\n",
      "earth_second: ('time',), float64\n",
      "earth_year: ('time',), float64\n",
      "emars_sol: ('time',), float64\n",
      "lat: ('lat',), float64\n",
      "latu: ('latu',), float64\n",
      "lon: ('lon',), float64\n",
      "lonv: ('lonv',), float64\n",
      "macda_sol: ('time',), float64\n",
      "mars_hour: ('time',), float64\n",
      "mars_soy: ('time',), float64\n",
      "pfull: ('pfull',), float64\n",
      "phalf: ('phalf',), float64\n",
      "ps: ('time', 'lat', 'lon'), float64\n",
      "time: ('time',), float64\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"emars_v1.0_anal_mean_MY24_Ls120-150.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a503559c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "\n",
      "Dimensions:\n",
      "time: size=1128\n",
      "lat: size=36\n",
      "lon: size=60\n",
      "pfull: size=28\n",
      "latu: size=36\n",
      "lonv: size=60\n",
      "phalf: size=29\n",
      "\n",
      "Variables:\n",
      "Ls: ('time',), float64\n",
      "MY: ('time',), float64\n",
      "Surface_geopotential: ('lat', 'lon'), float64\n",
      "T: ('time', 'pfull', 'lat', 'lon'), float64\n",
      "U: ('time', 'pfull', 'latu', 'lon'), float64\n",
      "V: ('time', 'pfull', 'lat', 'lonv'), float64\n",
      "ak: ('phalf',), float32\n",
      "bk: ('phalf',), float32\n",
      "earth_day: ('time',), float64\n",
      "earth_hour: ('time',), float64\n",
      "earth_minute: ('time',), float64\n",
      "earth_month: ('time',), float64\n",
      "earth_second: ('time',), float64\n",
      "earth_year: ('time',), float64\n",
      "emars_sol: ('time',), float64\n",
      "lat: ('lat',), float64\n",
      "latu: ('latu',), float64\n",
      "lon: ('lon',), float64\n",
      "lonv: ('lonv',), float64\n",
      "macda_sol: ('time',), float64\n",
      "mars_hour: ('time',), float64\n",
      "mars_soy: ('time',), float64\n",
      "pfull: ('pfull',), float64\n",
      "phalf: ('phalf',), float64\n",
      "ps: ('time', 'lat', 'lon'), float64\n",
      "time: ('time',), float64\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"emars_v1.0_anal_sprd_MY31_Ls270-300.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f38c4f4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "\n",
      "Dimensions:\n",
      "phalf: size=29\n",
      "time: size=1128\n",
      "pfull: size=28\n",
      "lat: size=36\n",
      "lon: size=60\n",
      "\n",
      "Variables:\n",
      "bk: ('phalf',), float32\n",
      "cld: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "cldcol: ('time', 'lat', 'lon'), float32\n",
      "dod: ('time', 'lat', 'lon'), float32\n",
      "frost: ('time', 'lat', 'lon'), float32\n",
      "h: ('time', 'phalf', 'lat', 'lon'), float32\n",
      "hrad: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "lat: ('lat',), float64\n",
      "lheat: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "lon: ('lon',), float64\n",
      "o1: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "o2: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "o3: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "od1: ('time', 'lat', 'lon'), float32\n",
      "od2: ('time', 'lat', 'lon'), float32\n",
      "od3: ('time', 'lat', 'lon'), float32\n",
      "omega: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "opac: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "pfull: ('pfull',), float64\n",
      "phalf: ('phalf',), float64\n",
      "ak: ('phalf',), float32\n",
      "ps: ('time', 'lat', 'lon'), float32\n",
      "snow: ('time', 'lat', 'lon'), float32\n",
      "stress: ('time', 'lat', 'lon'), float32\n",
      "t: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "time: ('time',), float64\n",
      "tod: ('time', 'lat', 'lon'), float32\n",
      "ts: ('time', 'lat', 'lon'), float32\n",
      "u: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "v: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "vap: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "vod: ('time', 'lat', 'lon'), float32\n",
      "wcol: ('time', 'lat', 'lon'), float32\n",
      "emars_sol: ('time',), float64\n",
      "mars_hour: ('time',), float64\n",
      "MY: ('time',), float64\n",
      "Ls: ('time',), float64\n",
      "earth_year: ('time',), float64\n",
      "earth_month: ('time',), float64\n",
      "earth_day: ('time',), float64\n",
      "earth_hour: ('time',), float64\n",
      "earth_minute: ('time',), float64\n",
      "earth_second: ('time',), float64\n",
      "mars_soy: ('time',), float64\n",
      "macda_sol: ('time',), float64\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"emars_v1.0_back_mean_MY31_Ls270-300.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e11620bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 2GB\n",
      "Dimensions:               (time: 1416, lat: 36, lon: 60, pfull: 28, latu: 36,\n",
      "                           lonv: 60, phalf: 29)\n",
      "Coordinates:\n",
      "  * lat                   (lat) float64 288B -88.71 -84.86 ... 84.86 88.71\n",
      "  * latu                  (latu) float64 288B -87.43 -87.43 ... 82.29 87.43\n",
      "  * lon                   (lon) float64 480B 3.0 9.0 15.0 ... 345.0 351.0 357.0\n",
      "  * lonv                  (lonv) float64 480B 0.0 6.0 12.0 ... 342.0 348.0 354.0\n",
      "  * pfull                 (pfull) float64 224B 0.0003547 0.001128 ... 7.61 7.674\n",
      "  * phalf                 (phalf) float64 232B 0.0002 0.0005738 ... 7.648 7.7\n",
      "  * time                  (time) float64 11kB 0.0 1.0 ... 1.414e+03 1.415e+03\n",
      "Data variables: (12/19)\n",
      "    Ls                    (time) float64 11kB ...\n",
      "    MY                    (time) float64 11kB ...\n",
      "    Surface_geopotential  (lat, lon) float64 17kB ...\n",
      "    T                     (time, pfull, lat, lon) float64 685MB ...\n",
      "    U                     (time, pfull, latu, lon) float64 685MB ...\n",
      "    V                     (time, pfull, lat, lonv) float64 685MB ...\n",
      "    ...                    ...\n",
      "    earth_year            (time) float64 11kB ...\n",
      "    emars_sol             (time) float64 11kB ...\n",
      "    macda_sol             (time) float64 11kB ...\n",
      "    mars_hour             (time) float64 11kB ...\n",
      "    mars_soy              (time) float64 11kB ...\n",
      "    ps                    (time, lat, lon) float64 24MB ...\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"emars_v1.0_anal_mean_MY24_Ls120-150.nc\")\n",
    "print(ds)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0b5a93f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 2GB\n",
      "Dimensions:               (time: 1128, lat: 36, lon: 60, pfull: 28, latu: 36,\n",
      "                           lonv: 60, phalf: 29)\n",
      "Coordinates:\n",
      "  * lat                   (lat) float64 288B -88.71 -84.86 ... 84.86 88.71\n",
      "  * latu                  (latu) float64 288B -87.43 -87.43 ... 82.29 87.43\n",
      "  * lon                   (lon) float64 480B 3.0 9.0 15.0 ... 345.0 351.0 357.0\n",
      "  * lonv                  (lonv) float64 480B 0.0 6.0 12.0 ... 342.0 348.0 354.0\n",
      "  * pfull                 (pfull) float64 224B 0.0003547 0.001128 ... 7.61 7.674\n",
      "  * phalf                 (phalf) float64 232B 0.0002 0.0005738 ... 7.648 7.7\n",
      "  * time                  (time) float64 9kB 0.0 1.0 2.0 ... 1.126e+03 1.127e+03\n",
      "Data variables: (12/19)\n",
      "    Ls                    (time) float64 9kB ...\n",
      "    MY                    (time) float64 9kB ...\n",
      "    Surface_geopotential  (lat, lon) float64 17kB ...\n",
      "    T                     (time, pfull, lat, lon) float64 546MB ...\n",
      "    U                     (time, pfull, latu, lon) float64 546MB ...\n",
      "    V                     (time, pfull, lat, lonv) float64 546MB ...\n",
      "    ...                    ...\n",
      "    earth_year            (time) float64 9kB ...\n",
      "    emars_sol             (time) float64 9kB ...\n",
      "    macda_sol             (time) float64 9kB ...\n",
      "    mars_hour             (time) float64 9kB ...\n",
      "    mars_soy              (time) float64 9kB ...\n",
      "    ps                    (time, lat, lon) float64 19MB ...\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"emars_v1.0_anal_sprd_MY31_Ls270-300.nc\")\n",
    "print(ds)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7a6acdca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 4GB\n",
      "Dimensions:       (phalf: 29, time: 1128, pfull: 28, lat: 36, lon: 60)\n",
      "Coordinates:\n",
      "  * lat           (lat) float64 288B -88.71 -84.86 -79.71 ... 79.71 84.86 88.71\n",
      "  * lon           (lon) float64 480B 3.0 9.0 15.0 21.0 ... 345.0 351.0 357.0\n",
      "  * pfull         (pfull) float64 224B 0.0003547 0.001128 ... 7.61 7.674\n",
      "  * phalf         (phalf) float64 232B 0.0002 0.0005738 0.001958 ... 7.648 7.7\n",
      "  * time          (time) float64 9kB 0.0 1.0 2.0 ... 1.126e+03 1.127e+03\n",
      "Data variables: (12/40)\n",
      "    bk            (phalf) float32 116B ...\n",
      "    cld           (time, pfull, lat, lon) float32 273MB ...\n",
      "    cldcol        (time, lat, lon) float32 10MB ...\n",
      "    dod           (time, lat, lon) float32 10MB ...\n",
      "    frost         (time, lat, lon) float32 10MB ...\n",
      "    h             (time, phalf, lat, lon) float32 283MB ...\n",
      "    ...            ...\n",
      "    earth_day     (time) float64 9kB ...\n",
      "    earth_hour    (time) float64 9kB ...\n",
      "    earth_minute  (time) float64 9kB ...\n",
      "    earth_second  (time) float64 9kB ...\n",
      "    mars_soy      (time) float64 9kB ...\n",
      "    macda_sol     (time) float64 9kB ...\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"emars_v1.0_back_mean_MY31_Ls270-300.nc\")\n",
    "print(ds)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0519e5cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Attributes:\n",
      "\n",
      "Dimensions:\n",
      "phalf: size=29\n",
      "time: size=624\n",
      "pfull: size=28\n",
      "lat: size=36\n",
      "lon: size=60\n",
      "\n",
      "Variables:\n",
      "bk: ('phalf',), float32\n",
      "cld: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "cldcol: ('time', 'lat', 'lon'), float32\n",
      "dod: ('time', 'lat', 'lon'), float32\n",
      "frost: ('time', 'lat', 'lon'), float32\n",
      "h: ('time', 'phalf', 'lat', 'lon'), float32\n",
      "hrad: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "lat: ('lat',), float64\n",
      "lheat: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "lon: ('lon',), float64\n",
      "o1: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "o2: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "o3: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "od1: ('time', 'lat', 'lon'), float32\n",
      "od2: ('time', 'lat', 'lon'), float32\n",
      "od3: ('time', 'lat', 'lon'), float32\n",
      "omega: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "opac: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "pfull: ('pfull',), float64\n",
      "phalf: ('phalf',), float64\n",
      "ak: ('phalf',), float32\n",
      "ps: ('time', 'lat', 'lon'), float32\n",
      "snow: ('time', 'lat', 'lon'), float32\n",
      "stress: ('time', 'lat', 'lon'), float32\n",
      "t: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "time: ('time',), float64\n",
      "tod: ('time', 'lat', 'lon'), float32\n",
      "ts: ('time', 'lat', 'lon'), float32\n",
      "u: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "v: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "vap: ('time', 'pfull', 'lat', 'lon'), float32\n",
      "vod: ('time', 'lat', 'lon'), float32\n",
      "wcol: ('time', 'lat', 'lon'), float32\n",
      "emars_sol: ('time',), float64\n",
      "mars_hour: ('time',), float64\n",
      "MY: ('time',), float64\n",
      "Ls: ('time',), float64\n",
      "earth_year: ('time',), float64\n",
      "earth_month: ('time',), float64\n",
      "earth_day: ('time',), float64\n",
      "earth_hour: ('time',), float64\n",
      "earth_minute: ('time',), float64\n",
      "earth_second: ('time',), float64\n",
      "mars_soy: ('time',), float64\n",
      "macda_sol: ('time',), float64\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "# Open the NetCDF file\n",
    "file_path = \"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\"  # Replace with your file path\n",
    "dataset = Dataset(file_path, mode=\"r\")\n",
    "\n",
    "# Print metadata and structure\n",
    "print(\"Global Attributes:\")\n",
    "for attr in dataset.ncattrs():\n",
    "    print(f\"{attr}: {getattr(dataset, attr)}\")\n",
    "\n",
    "print(\"\\nDimensions:\")\n",
    "for dim_name, dim in dataset.dimensions.items():\n",
    "    print(f\"{dim_name}: size={len(dim)}\")\n",
    "\n",
    "print(\"\\nVariables:\")\n",
    "for var_name, var in dataset.variables.items():\n",
    "    print(f\"{var_name}: {var.dimensions}, {var.dtype}\")\n",
    "\n",
    "# Close the dataset\n",
    "dataset.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5b00e49a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 2GB\n",
      "Dimensions:       (phalf: 29, time: 624, pfull: 28, lat: 36, lon: 60)\n",
      "Coordinates:\n",
      "  * lat           (lat) float64 288B -88.71 -84.86 -79.71 ... 79.71 84.86 88.71\n",
      "  * lon           (lon) float64 480B 3.0 9.0 15.0 21.0 ... 345.0 351.0 357.0\n",
      "  * pfull         (pfull) float64 224B 0.0003547 0.001128 ... 7.61 7.674\n",
      "  * phalf         (phalf) float64 232B 0.0002 0.0005738 0.001958 ... 7.648 7.7\n",
      "  * time          (time) float64 5kB 0.0 1.0 2.0 3.0 ... 620.0 621.0 622.0 623.0\n",
      "Data variables: (12/40)\n",
      "    bk            (phalf) float32 116B ...\n",
      "    cld           (time, pfull, lat, lon) float32 151MB ...\n",
      "    cldcol        (time, lat, lon) float32 5MB ...\n",
      "    dod           (time, lat, lon) float32 5MB ...\n",
      "    frost         (time, lat, lon) float32 5MB ...\n",
      "    h             (time, phalf, lat, lon) float32 156MB ...\n",
      "    ...            ...\n",
      "    earth_day     (time) float64 5kB ...\n",
      "    earth_hour    (time) float64 5kB ...\n",
      "    earth_minute  (time) float64 5kB ...\n",
      "    earth_second  (time) float64 5kB ...\n",
      "    mars_soy      (time) float64 5kB ...\n",
      "    macda_sol     (time) float64 5kB ...\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\")\n",
    "print(ds)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ab322ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of t: (624, 28, 36, 60)\n",
      "Shape of u: (624, 28, 36, 60)\n",
      "Shape of v: (624, 28, 36, 60)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\")\n",
    "\n",
    "print(\"Shape of t:\", ds[\"t\"].shape)\n",
    "print(\"Shape of u:\", ds[\"u\"].shape)\n",
    "print(\"Shape of v:\", ds[\"v\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3477ab56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of t: (1, 721, 1440)\n",
      "Shape of u: (1, 721, 1440)\n",
      "Shape of v: (1, 721, 1440)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"static.nc\")\n",
    "\n",
    "print(\"Shape of t:\", ds[\"z\"].shape)\n",
    "print(\"Shape of u:\", ds[\"slt\"].shape)\n",
    "print(\"Shape of v:\", ds[\"lsm\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "799e6470",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-23 19:58:15,350 INFO [2024-09-26T00:00:00] Watch our [Forum](https://forum.ecmwf.int/) for Announcements, news and other discussed topics.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Static variables downloaded!\n",
      "Surface-level variables downloaded!\n",
      "Atmospheric variables downloaded!\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "import cdsapi\n",
    "\n",
    "# Data will be downloaded here.\n",
    "download_path = Path(\"~/downloads/era5\")\n",
    "\n",
    "c = cdsapi.Client()\n",
    "\n",
    "download_path = download_path.expanduser()\n",
    "download_path.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "# Download the static variables.\n",
    "if not (download_path / \"static.nc\").exists():\n",
    "    c.retrieve(\n",
    "        \"reanalysis-era5-single-levels\",\n",
    "        {\n",
    "            \"product_type\": \"reanalysis\",\n",
    "            \"variable\": [\n",
    "                \"geopotential\",\n",
    "                \"land_sea_mask\",\n",
    "                \"soil_type\",\n",
    "            ],\n",
    "            \"year\": \"2023\",\n",
    "            \"month\": \"01\",\n",
    "            \"day\": \"01\",\n",
    "            \"time\": \"00:00\",\n",
    "            \"format\": \"netcdf\",\n",
    "        },\n",
    "        str(download_path / \"static.nc\"),\n",
    "    )\n",
    "print(\"Static variables downloaded!\")\n",
    "\n",
    "# Download the surface-level variables.\n",
    "if not (download_path / \"2023-01-01-surface-level.nc\").exists():\n",
    "    c.retrieve(\n",
    "        \"reanalysis-era5-single-levels\",\n",
    "        {\n",
    "            \"product_type\": \"reanalysis\",\n",
    "            \"variable\": [\n",
    "                \"2m_temperature\",\n",
    "                \"10m_u_component_of_wind\",\n",
    "                \"10m_v_component_of_wind\",\n",
    "                \"mean_sea_level_pressure\",\n",
    "            ],\n",
    "            \"year\": \"2023\",\n",
    "            \"month\": \"01\",\n",
    "            \"day\": \"01\",\n",
    "            \"time\": [\"00:00\", \"06:00\", \"12:00\", \"18:00\"],\n",
    "            \"format\": \"netcdf\",\n",
    "        },\n",
    "        str(download_path / \"2023-01-01-surface-level.nc\"),\n",
    "    )\n",
    "print(\"Surface-level variables downloaded!\")\n",
    "\n",
    "# Download the atmospheric variables.\n",
    "if not (download_path / \"2023-01-01-atmospheric.nc\").exists():\n",
    "    c.retrieve(\n",
    "        \"reanalysis-era5-pressure-levels\",\n",
    "        {\n",
    "            \"product_type\": \"reanalysis\",\n",
    "            \"variable\": [\n",
    "                \"temperature\",\n",
    "                \"u_component_of_wind\",\n",
    "                \"v_component_of_wind\",\n",
    "                \"specific_humidity\",\n",
    "                \"geopotential\",\n",
    "            ],\n",
    "            \"pressure_level\": [\n",
    "                \"50\",\n",
    "                \"100\",\n",
    "                \"150\",\n",
    "                \"200\",\n",
    "                \"250\",\n",
    "                \"300\",\n",
    "                \"400\",\n",
    "                \"500\",\n",
    "                \"600\",\n",
    "                \"700\",\n",
    "                \"850\",\n",
    "                \"925\",\n",
    "                \"1000\",\n",
    "            ],\n",
    "            \"year\": \"2023\",\n",
    "            \"month\": \"01\",\n",
    "            \"day\": \"01\",\n",
    "            \"time\": [\"00:00\", \"06:00\", \"12:00\", \"18:00\"],\n",
    "            \"format\": \"netcdf\",\n",
    "        },\n",
    "        str(download_path / \"2023-01-01-atmospheric.nc\"),\n",
    "    )\n",
    "print(\"Atmospheric variables downloaded!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a33f8d62",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import xarray as xr\n",
    "\n",
    "from aurora import Batch, Metadata\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "download_path = Path(\"~/downloads/era5\")\n",
    "\n",
    "static_vars_ds = xr.open_dataset(download_path / \"static.nc\", engine=\"netcdf4\")\n",
    "surf_vars_ds = xr.open_dataset(download_path / \"emars_MY27_ts_interp.nc\", engine=\"netcdf4\")\n",
    "atmos_vars_ds = xr.open_dataset(download_path / \"2023-01-01-atmospheric.nc\", engine=\"netcdf4\")\n",
    "\n",
    "surf_vars_ds = surf_vars_ds.sortby(\"lat\", ascending=False)\n",
    "\n",
    "batch = Batch(\n",
    "    surf_vars={\n",
    "        # First select the first two time points: 00:00 and 06:00. Afterwards, `[None]`\n",
    "        # inserts a batch dimension of size one.\n",
    "        \"2t\": torch.from_numpy(surf_vars_ds[\"ts\"].values[:2][None])\n",
    "    },\n",
    "    static_vars={\n",
    "        # The static variables are constant, so we just get them for the first time.\n",
    "        \"z\": torch.from_numpy(static_vars_ds[\"z\"].values[0]),\n",
    "        \"slt\": torch.from_numpy(static_vars_ds[\"slt\"].values[0]),\n",
    "        \"lsm\": torch.from_numpy(static_vars_ds[\"lsm\"].values[0]),\n",
    "    },\n",
    "    atmos_vars={\n",
    "        \"t\": torch.from_numpy(atmos_vars_ds[\"t\"].values[:2][None]),\n",
    "        \"u\": torch.from_numpy(atmos_vars_ds[\"u\"].values[:2][None]),\n",
    "        \"v\": torch.from_numpy(atmos_vars_ds[\"v\"].values[:2][None]),\n",
    "        \"q\": torch.from_numpy(atmos_vars_ds[\"q\"].values[:2][None]),\n",
    "        \"z\": torch.from_numpy(atmos_vars_ds[\"z\"].values[:2][None]),\n",
    "    },\n",
    "    metadata=Metadata(\n",
    "        lat=torch.from_numpy(surf_vars_ds.lat.values),\n",
    "        lon=torch.from_numpy(surf_vars_ds.lon.values),\n",
    "        # Converting to `datetime64[s]` ensures that the output of `tolist()` gives\n",
    "        # `datetime.datetime`s. Note that this needs to be a tuple of length one:\n",
    "        # one value for every batch element. Select element 1, corresponding to time\n",
    "        # 06:00.\n",
    "        time=(surf_vars_ds.time.values.astype(\"datetime64[s]\").tolist()[1],),\n",
    "        atmos_levels=tuple(int(level) for level in atmos_vars_ds.pressure_level.values),\n",
    "    ),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "463efed1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set to `False` to run locally and to `True` to run on Foundry.\n",
    "run_on_foundry = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b541f0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HTTP Error 429 thrown while requesting HEAD https://huggingface.co/microsoft/aurora/resolve/main/aurora-0.25-pretrained.ckpt\n",
      "Retrying in 1s [Retry 1/5].\n"
     ]
    }
   ],
   "source": [
    "if not run_on_foundry:\n",
    "    from aurora import Aurora, rollout\n",
    "\n",
    "    model = Aurora(use_lora=False)  # The pretrained version does not use LoRA.\n",
    "    model.load_checkpoint(\"microsoft/aurora\", \"aurora-0.25-pretrained.ckpt\")\n",
    "\n",
    "    model.eval()\n",
    "    model = model.to(\"cuda\")\n",
    "\n",
    "    with torch.inference_mode():\n",
    "        preds = [pred.to(\"cpu\") for pred in rollout(model, batch, steps=2)]\n",
    "\n",
    "    model = model.to(\"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "20a0d997",
   "metadata": {},
   "outputs": [],
   "source": [
    "if run_on_foundry:\n",
    "    import logging\n",
    "    import os\n",
    "    import warnings\n",
    "\n",
    "    from aurora.foundry import BlobStorageChannel, FoundryClient, submit\n",
    "\n",
    "    # In this demo, we silence all warnings.\n",
    "    warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "    # But we do want to show what's happening under the hood!\n",
    "    logging.basicConfig(level=logging.WARNING, format=\"%(asctime)s [%(levelname)s] %(message)s\")\n",
    "    logging.getLogger(\"aurora\").setLevel(logging.INFO)\n",
    "\n",
    "    foundry_client = FoundryClient(\n",
    "        endpoint=os.environ[\"FOUNDRY_ENDPOINT\"],\n",
    "        token=os.environ[\"FOUNDRY_TOKEN\"],\n",
    "    )\n",
    "    channel = BlobStorageChannel(os.environ[\"BLOB_URL_WITH_SAS\"])\n",
    "\n",
    "    predictions = list(\n",
    "        submit(\n",
    "            batch,\n",
    "            model_name=\"aurora-0.25-pretrained\",\n",
    "            num_steps=2,\n",
    "            foundry_client=foundry_client,\n",
    "            channel=channel,\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e3aad1aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x650 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots(2, 2, figsize=(12, 6.5))\n",
    "\n",
    "for i in range(ax.shape[0]):\n",
    "    pred = preds[i]\n",
    "\n",
    "    ax[i, 0].imshow(pred.surf_vars[\"2t\"][0, 0].numpy() - 273.15, vmin=-50, vmax=50)\n",
    "    ax[i, 0].set_ylabel(str(pred.metadata.time[0]))\n",
    "    if i == 0:\n",
    "        ax[i, 0].set_title(\"Aurora Prediction\")\n",
    "    ax[i, 0].set_xticks([])\n",
    "    ax[i, 0].set_yticks([])\n",
    "\n",
    "    ax[i, 1].imshow(surf_vars_ds[\"ts\"][2 + i].values - 273.15, vmin=-50, vmax=50)\n",
    "    if i == 0:\n",
    "        ax[i, 1].set_title(\"ERA5\")\n",
    "    ax[i, 1].set_xticks([])\n",
    "    ax[i, 1].set_yticks([])\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f7960c1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba5041c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([721, 1440])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "np.shape(batch.static_vars[\"z\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "697d42ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 2, 721, 1440])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "np.shape(batch.surf_vars[\"2t\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "db7debdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 2, 13, 721, 1440])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "np.shape(batch.atmos_vars[\"t\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ebdc4a50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of ts: (624, 36, 60)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "\n",
    "ds = xr.open_dataset(\"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\")\n",
    "\n",
    "print(\"Shape of ts:\", ds[\"ts\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b0ba4efa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[[223.5824, 223.5374, 223.5034,  ..., 223.7799, 223.7047, 223.6384],\n",
      "          [223.9627, 222.3685, 222.6120,  ..., 225.5593, 224.8330, 224.3504],\n",
      "          [221.0170, 220.5041, 220.2894,  ..., 224.0464, 222.5482, 222.2478],\n",
      "          ...,\n",
      "          [146.1818, 146.1783, 146.1785,  ..., 146.2084, 146.1984, 146.1881],\n",
      "          [145.5476, 145.5469, 145.5470,  ..., 145.5491, 145.5496, 145.5484],\n",
      "          [145.2233, 145.2233, 145.2233,  ..., 145.2233, 145.2233, 145.2233]],\n",
      "\n",
      "         [[223.5226, 223.5063, 223.4998,  ..., 223.6415, 223.5914, 223.5508],\n",
      "          [223.5661, 222.0838, 222.4235,  ..., 224.7441, 224.2569, 223.8249],\n",
      "          [220.1219, 219.8549, 219.8869,  ..., 222.3947, 221.1304, 221.0814],\n",
      "          ...,\n",
      "          [146.1882, 146.1818, 146.1794,  ..., 146.2169, 146.2080, 146.1970],\n",
      "          [145.5531, 145.5539, 145.5542,  ..., 145.5500, 145.5516, 145.5520],\n",
      "          [145.2223, 145.2223, 145.2223,  ..., 145.2223, 145.2223, 145.2223]]]])\n"
     ]
    }
   ],
   "source": [
    "print(batch.surf_vars[\"2t\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a84d4fb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "import numpy as np\n",
    "\n",
    "# Load dataset fully in memory\n",
    "ds = xr.open_dataset(\"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\")\n",
    "\n",
    "# Extract bounds from existing lat/lon\n",
    "lat_min = ds.lat.values.min()\n",
    "lat_max = ds.lat.values.max()\n",
    "lon_min = ds.lon.values.min()\n",
    "lon_max = ds.lon.values.max()\n",
    "\n",
    "# Create new lat/lon grid\n",
    "new_lat = np.linspace(lat_min, lat_max, 721)\n",
    "new_lon = np.linspace(lon_min, lon_max, 1440)\n",
    "\n",
    "# Interpolate `ts` only\n",
    "ds_interp = ds[\"ts\"].interp(lat=new_lat, lon=new_lon)\n",
    "\n",
    "# Save the new variable to a new file (or overwrite if you want)\n",
    "ds_interp.to_netcdf(\"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed45ae64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 2GB\n",
      "Dimensions:       (phalf: 29, time: 624, pfull: 28, lat: 36, lon: 60)\n",
      "Coordinates:\n",
      "  * lat           (lat) float64 288B -88.71 -84.86 -79.71 ... 79.71 84.86 88.71\n",
      "  * lon           (lon) float64 480B 3.0 9.0 15.0 21.0 ... 345.0 351.0 357.0\n",
      "  * pfull         (pfull) float64 224B 0.0003547 0.001128 ... 7.61 7.674\n",
      "  * phalf         (phalf) float64 232B 0.0002 0.0005738 0.001958 ... 7.648 7.7\n",
      "  * time          (time) float64 5kB 0.0 1.0 2.0 3.0 ... 620.0 621.0 622.0 623.0\n",
      "Data variables: (12/40)\n",
      "    bk            (phalf) float32 116B ...\n",
      "    cld           (time, pfull, lat, lon) float32 151MB ...\n",
      "    cldcol        (time, lat, lon) float32 5MB ...\n",
      "    dod           (time, lat, lon) float32 5MB ...\n",
      "    frost         (time, lat, lon) float32 5MB ...\n",
      "    h             (time, phalf, lat, lon) float32 156MB ...\n",
      "    ...            ...\n",
      "    earth_day     (time) float64 5kB ...\n",
      "    earth_hour    (time) float64 5kB ...\n",
      "    earth_minute  (time) float64 5kB ...\n",
      "    earth_second  (time) float64 5kB ...\n",
      "    mars_soy      (time) float64 5kB ...\n",
      "    macda_sol     (time) float64 5kB ...\n",
      "(624, 36, 60)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "ds = xr.open_dataset(\"emars_v1.0_cntl_memb_MY27_Ls090-120.nc\")\n",
    "print(ds)\n",
    "print(ds[\"ts\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5a2ad0d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 5GB\n",
      "Dimensions:  (time: 624, lat: 721, lon: 1440)\n",
      "Coordinates:\n",
      "  * time     (time) float64 5kB 0.0 1.0 2.0 3.0 4.0 ... 620.0 621.0 622.0 623.0\n",
      "  * lat      (lat) float64 6kB -88.71 -88.47 -88.22 -87.98 ... 88.22 88.47 88.71\n",
      "  * lon      (lon) float64 12kB 3.0 3.246 3.492 3.738 ... 356.5 356.8 357.0\n",
      "Data variables:\n",
      "    ts       (time, lat, lon) float64 5GB ...\n",
      "(624, 721, 1440)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "ds = xr.open_dataset(\"emars_MY27_ts_interp.nc\")\n",
    "print(ds)\n",
    "print(ds[\"ts\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0af2d7f9",
   "metadata": {},
   "outputs": [
    {
     "ename": "OSError",
     "evalue": "[Errno -101] NetCDF: HDF error: '/home/altiwain/downloads/era5/emars_ts_ps_interp.nc'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/file_manager.py:211\u001b[39m, in \u001b[36mCachingFileManager._acquire_with_cache_info\u001b[39m\u001b[34m(self, needs_lock)\u001b[39m\n\u001b[32m    210\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m211\u001b[39m     file = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_cache\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_key\u001b[49m\u001b[43m]\u001b[49m\n\u001b[32m    212\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/lru_cache.py:56\u001b[39m, in \u001b[36mLRUCache.__getitem__\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m     55\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m._lock:\n\u001b[32m---> \u001b[39m\u001b[32m56\u001b[39m     value = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_cache\u001b[49m\u001b[43m[\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m\n\u001b[32m     57\u001b[39m     \u001b[38;5;28mself\u001b[39m._cache.move_to_end(key)\n",
      "\u001b[31mKeyError\u001b[39m: [<class 'netCDF4._netCDF4.Dataset'>, ('/home/altiwain/downloads/era5/emars_ts_ps_interp.nc',), 'r', (('clobber', True), ('diskless', False), ('format', 'NETCDF4'), ('persist', False)), '590b542c-3668-47e7-9765-01caa7c3e9f6']",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[31mOSError\u001b[39m                                   Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mxarray\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mxr\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m ds = \u001b[43mxr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43memars_ts_ps_interp.nc\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[38;5;28mprint\u001b[39m(ds)\n\u001b[32m      4\u001b[39m \u001b[38;5;28mprint\u001b[39m(ds[\u001b[33m\"\u001b[39m\u001b[33mps\u001b[39m\u001b[33m\"\u001b[39m].shape)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/api.py:687\u001b[39m, in \u001b[36mopen_dataset\u001b[39m\u001b[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)\u001b[39m\n\u001b[32m    675\u001b[39m decoders = _resolve_decoders_kwargs(\n\u001b[32m    676\u001b[39m     decode_cf,\n\u001b[32m    677\u001b[39m     open_backend_dataset_parameters=backend.open_dataset_parameters,\n\u001b[32m   (...)\u001b[39m\u001b[32m    683\u001b[39m     decode_coords=decode_coords,\n\u001b[32m    684\u001b[39m )\n\u001b[32m    686\u001b[39m overwrite_encoded_chunks = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33moverwrite_encoded_chunks\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[32m--> \u001b[39m\u001b[32m687\u001b[39m backend_ds = \u001b[43mbackend\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    688\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    689\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    690\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mdecoders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    691\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    692\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    693\u001b[39m ds = _dataset_from_backend_dataset(\n\u001b[32m    694\u001b[39m     backend_ds,\n\u001b[32m    695\u001b[39m     filename_or_obj,\n\u001b[32m   (...)\u001b[39m\u001b[32m    705\u001b[39m     **kwargs,\n\u001b[32m    706\u001b[39m )\n\u001b[32m    707\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m ds\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/netCDF4_.py:666\u001b[39m, in \u001b[36mNetCDF4BackendEntrypoint.open_dataset\u001b[39m\u001b[34m(self, filename_or_obj, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, use_cftime, decode_timedelta, group, mode, format, clobber, diskless, persist, auto_complex, lock, autoclose)\u001b[39m\n\u001b[32m    644\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mopen_dataset\u001b[39m(\n\u001b[32m    645\u001b[39m     \u001b[38;5;28mself\u001b[39m,\n\u001b[32m    646\u001b[39m     filename_or_obj: \u001b[38;5;28mstr\u001b[39m | os.PathLike[Any] | ReadBuffer | AbstractDataStore,\n\u001b[32m   (...)\u001b[39m\u001b[32m    663\u001b[39m     autoclose=\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[32m    664\u001b[39m ) -> Dataset:\n\u001b[32m    665\u001b[39m     filename_or_obj = _normalize_path(filename_or_obj)\n\u001b[32m--> \u001b[39m\u001b[32m666\u001b[39m     store = \u001b[43mNetCDF4DataStore\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    667\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    668\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    669\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    670\u001b[39m \u001b[43m        \u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m=\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    671\u001b[39m \u001b[43m        \u001b[49m\u001b[43mclobber\u001b[49m\u001b[43m=\u001b[49m\u001b[43mclobber\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    672\u001b[39m \u001b[43m        \u001b[49m\u001b[43mdiskless\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdiskless\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    673\u001b[39m \u001b[43m        \u001b[49m\u001b[43mpersist\u001b[49m\u001b[43m=\u001b[49m\u001b[43mpersist\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    674\u001b[39m \u001b[43m        \u001b[49m\u001b[43mauto_complex\u001b[49m\u001b[43m=\u001b[49m\u001b[43mauto_complex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    675\u001b[39m \u001b[43m        \u001b[49m\u001b[43mlock\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlock\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    676\u001b[39m \u001b[43m        \u001b[49m\u001b[43mautoclose\u001b[49m\u001b[43m=\u001b[49m\u001b[43mautoclose\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    677\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    679\u001b[39m     store_entrypoint = StoreBackendEntrypoint()\n\u001b[32m    680\u001b[39m     \u001b[38;5;28;01mwith\u001b[39;00m close_on_error(store):\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/netCDF4_.py:452\u001b[39m, in \u001b[36mNetCDF4DataStore.open\u001b[39m\u001b[34m(cls, filename, mode, format, group, clobber, diskless, persist, auto_complex, lock, lock_maker, autoclose)\u001b[39m\n\u001b[32m    448\u001b[39m     kwargs[\u001b[33m\"\u001b[39m\u001b[33mauto_complex\u001b[39m\u001b[33m\"\u001b[39m] = auto_complex\n\u001b[32m    449\u001b[39m manager = CachingFileManager(\n\u001b[32m    450\u001b[39m     netCDF4.Dataset, filename, mode=mode, kwargs=kwargs\n\u001b[32m    451\u001b[39m )\n\u001b[32m--> \u001b[39m\u001b[32m452\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mmanager\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m=\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlock\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlock\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mautoclose\u001b[49m\u001b[43m=\u001b[49m\u001b[43mautoclose\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/netCDF4_.py:393\u001b[39m, in \u001b[36mNetCDF4DataStore.__init__\u001b[39m\u001b[34m(self, manager, group, mode, lock, autoclose)\u001b[39m\n\u001b[32m    391\u001b[39m \u001b[38;5;28mself\u001b[39m._group = group\n\u001b[32m    392\u001b[39m \u001b[38;5;28mself\u001b[39m._mode = mode\n\u001b[32m--> \u001b[39m\u001b[32m393\u001b[39m \u001b[38;5;28mself\u001b[39m.format = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mds\u001b[49m.data_model\n\u001b[32m    394\u001b[39m \u001b[38;5;28mself\u001b[39m._filename = \u001b[38;5;28mself\u001b[39m.ds.filepath()\n\u001b[32m    395\u001b[39m \u001b[38;5;28mself\u001b[39m.is_remote = is_remote_uri(\u001b[38;5;28mself\u001b[39m._filename)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/netCDF4_.py:461\u001b[39m, in \u001b[36mNetCDF4DataStore.ds\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    459\u001b[39m \u001b[38;5;129m@property\u001b[39m\n\u001b[32m    460\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mds\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m--> \u001b[39m\u001b[32m461\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_acquire\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/netCDF4_.py:455\u001b[39m, in \u001b[36mNetCDF4DataStore._acquire\u001b[39m\u001b[34m(self, needs_lock)\u001b[39m\n\u001b[32m    454\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_acquire\u001b[39m(\u001b[38;5;28mself\u001b[39m, needs_lock=\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m455\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mwith\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_manager\u001b[49m\u001b[43m.\u001b[49m\u001b[43macquire_context\u001b[49m\u001b[43m(\u001b[49m\u001b[43mneeds_lock\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mas\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mroot\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    456\u001b[39m \u001b[43m        \u001b[49m\u001b[43mds\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43m_nc4_require_group\u001b[49m\u001b[43m(\u001b[49m\u001b[43mroot\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_group\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_mode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    457\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m ds\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.conda/envs/aurora_env/lib/python3.13/contextlib.py:141\u001b[39m, in \u001b[36m_GeneratorContextManager.__enter__\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    139\u001b[39m \u001b[38;5;28;01mdel\u001b[39;00m \u001b[38;5;28mself\u001b[39m.args, \u001b[38;5;28mself\u001b[39m.kwds, \u001b[38;5;28mself\u001b[39m.func\n\u001b[32m    140\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m141\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mnext\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mgen\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    142\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mStopIteration\u001b[39;00m:\n\u001b[32m    143\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mgenerator didn\u001b[39m\u001b[33m'\u001b[39m\u001b[33mt yield\u001b[39m\u001b[33m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/file_manager.py:199\u001b[39m, in \u001b[36mCachingFileManager.acquire_context\u001b[39m\u001b[34m(self, needs_lock)\u001b[39m\n\u001b[32m    196\u001b[39m \u001b[38;5;129m@contextlib\u001b[39m.contextmanager\n\u001b[32m    197\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34macquire_context\u001b[39m(\u001b[38;5;28mself\u001b[39m, needs_lock=\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[32m    198\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"Context manager for acquiring a file.\"\"\"\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m199\u001b[39m     file, cached = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_acquire_with_cache_info\u001b[49m\u001b[43m(\u001b[49m\u001b[43mneeds_lock\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    200\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    201\u001b[39m         \u001b[38;5;28;01myield\u001b[39;00m file\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/.local/lib/python3.13/site-packages/xarray/backends/file_manager.py:217\u001b[39m, in \u001b[36mCachingFileManager._acquire_with_cache_info\u001b[39m\u001b[34m(self, needs_lock)\u001b[39m\n\u001b[32m    215\u001b[39m     kwargs = kwargs.copy()\n\u001b[32m    216\u001b[39m     kwargs[\u001b[33m\"\u001b[39m\u001b[33mmode\u001b[39m\u001b[33m\"\u001b[39m] = \u001b[38;5;28mself\u001b[39m._mode\n\u001b[32m--> \u001b[39m\u001b[32m217\u001b[39m file = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_opener\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_args\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    218\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m._mode == \u001b[33m\"\u001b[39m\u001b[33mw\u001b[39m\u001b[33m\"\u001b[39m:\n\u001b[32m    219\u001b[39m     \u001b[38;5;66;03m# ensure file doesn't get overridden when opened again\u001b[39;00m\n\u001b[32m    220\u001b[39m     \u001b[38;5;28mself\u001b[39m._mode = \u001b[33m\"\u001b[39m\u001b[33ma\u001b[39m\u001b[33m\"\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32msrc/netCDF4/_netCDF4.pyx:2521\u001b[39m, in \u001b[36mnetCDF4._netCDF4.Dataset.__init__\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32msrc/netCDF4/_netCDF4.pyx:2158\u001b[39m, in \u001b[36mnetCDF4._netCDF4._ensure_nc_success\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[31mOSError\u001b[39m: [Errno -101] NetCDF: HDF error: '/home/altiwain/downloads/era5/emars_ts_ps_interp.nc'"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "ds = xr.open_dataset(\"emars_ts_ps_interp.nc\")\n",
    "print(ds)\n",
    "print(ds[\"ps\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "06a9bccb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 5GB\n",
      "Dimensions:  (time: 624, lat: 721, lon: 1440)\n",
      "Coordinates:\n",
      "  * time     (time) float64 5kB 0.0 1.0 2.0 3.0 4.0 ... 620.0 621.0 622.0 623.0\n",
      "  * lat      (lat) float64 6kB -88.71 -88.47 -88.22 -87.98 ... 88.22 88.47 88.71\n",
      "  * lon      (lon) float64 12kB 3.0 3.246 3.492 3.738 ... 356.5 356.8 357.0\n",
      "Data variables:\n",
      "    ps       (time, lat, lon) float64 5GB ...\n",
      "(624, 721, 1440)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "ds = xr.open_dataset(\"emars_MY27_ps_interp.nc\")\n",
    "print(ds)\n",
    "print(ds[\"ps\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6f181fa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 432MB\n",
      "Dimensions:  (time: 4, pfull: 13, lat: 721, lon: 1440)\n",
      "Coordinates:\n",
      "  * time     (time) float64 32B 0.0 207.7 415.3 623.0\n",
      "  * pfull    (pfull) float64 104B 0.0003547 0.6398 1.279 ... 6.395 7.035 7.674\n",
      "  * lat      (lat) float64 6kB -88.71 -88.47 -88.22 -87.98 ... 88.22 88.47 88.71\n",
      "  * lon      (lon) float64 12kB 3.0 3.246 3.492 3.738 ... 356.5 356.8 357.0\n",
      "Data variables:\n",
      "    t        (time, pfull, lat, lon) float64 432MB ...\n",
      "(4, 13, 721, 1440)\n"
     ]
    }
   ],
   "source": [
    "import xarray as xr\n",
    "ds = xr.open_dataset(\"emars_MY27_t_interp.nc\")\n",
    "print(ds)\n",
    "print(ds[\"t\"].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2a3bcb05",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import xarray as xr\n",
    "\n",
    "from aurora import Batch, Metadata\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "download_path = Path(\"~/downloads/era5\")\n",
    "\n",
    "static_vars_ds = xr.open_dataset(download_path / \"static.nc\", engine=\"netcdf4\")\n",
    "surf_vars_ds = xr.open_dataset(download_path / \"emars_MY27_ts_interp.nc\", engine=\"netcdf4\")\n",
    "surf_ps_ds = xr.open_dataset(download_path / \"emars_MY27_ps_interp.nc\", engine=\"netcdf4\")\n",
    "atmos_vars_ds = xr.open_dataset(download_path / \"2023-01-01-atmospheric.nc\", engine=\"netcdf4\")\n",
    "atmos_t_ds = xr.open_dataset(download_path / \"emars_MY27_t_interp.nc\", engine=\"netcdf4\")\n",
    "\n",
    "surf_vars_ds = surf_vars_ds.sortby(\"lat\", ascending=False)\n",
    "surf_ps_ds = surf_ps_ds.sortby(\"lat\", ascending=False)\n",
    "atmos_t_ds = atmos_t_ds.sortby(\"lat\", ascending=False)\n",
    "\n",
    "\n",
    "batch = Batch(\n",
    "    surf_vars={\n",
    "        # First select the first two time points: 00:00 and 06:00. Afterwards, `[None]`\n",
    "        # inserts a batch dimension of size one.\n",
    "        \"2t\": torch.from_numpy(surf_vars_ds[\"ts\"].values[:2][None]),\n",
    "        \"msl\": torch.from_numpy(surf_ps_ds[\"ps\"].values[:2][None]),\n",
    "    },\n",
    "    static_vars={\n",
    "        # The static variables are constant, so we just get them for the first time.\n",
    "        \"z\": torch.from_numpy(static_vars_ds[\"z\"].values[0]),\n",
    "        \"slt\": torch.from_numpy(static_vars_ds[\"slt\"].values[0]),\n",
    "        \"lsm\": torch.from_numpy(static_vars_ds[\"lsm\"].values[0]),\n",
    "    },\n",
    "    atmos_vars={\n",
    "        \"t\": torch.from_numpy(atmos_t_ds[\"t\"].values[:2][None]),\n",
    "        \"u\": torch.from_numpy(atmos_vars_ds[\"u\"].values[:2][None]),\n",
    "        \"v\": torch.from_numpy(atmos_vars_ds[\"v\"].values[:2][None]),\n",
    "        \"q\": torch.from_numpy(atmos_vars_ds[\"q\"].values[:2][None]),\n",
    "        \"z\": torch.from_numpy(atmos_vars_ds[\"z\"].values[:2][None]),\n",
    "    },\n",
    "    metadata=Metadata(\n",
    "        lat=torch.from_numpy(surf_vars_ds.lat.values),\n",
    "        lon=torch.from_numpy(surf_vars_ds.lon.values),\n",
    "        # Converting to `datetime64[s]` ensures that the output of `tolist()` gives\n",
    "        # `datetime.datetime`s. Note that this needs to be a tuple of length one:\n",
    "        # one value for every batch element. Select element 1, corresponding to time\n",
    "        # 06:00.\n",
    "        time=(surf_vars_ds.time.values.astype(\"datetime64[s]\").tolist()[1],),\n",
    "        atmos_levels=tuple(int(level) for level in atmos_vars_ds.pressure_level.values),\n",
    "    ),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aaafe7cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set to `False` to run locally and to `True` to run on Foundry.\n",
    "run_on_foundry = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07877b4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "if not run_on_foundry:\n",
    "    from aurora import Aurora, rollout\n",
    "\n",
    "    model = Aurora(use_lora=False)  # The pretrained version does not use LoRA.\n",
    "    model.load_checkpoint(\"microsoft/aurora\", \"aurora-0.25-pretrained.ckpt\")\n",
    "\n",
    "    model.eval()\n",
    "    model = model.to(\"cuda\")\n",
    "\n",
    "    with torch.inference_mode():\n",
    "        preds = [pred.to(\"cpu\") for pred in rollout(model, batch, steps=2)]\n",
    "\n",
    "    model = model.to(\"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b21139b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "if run_on_foundry:\n",
    "    import logging\n",
    "    import os\n",
    "    import warnings\n",
    "\n",
    "    from aurora.foundry import BlobStorageChannel, FoundryClient, submit\n",
    "\n",
    "    # In this demo, we silence all warnings.\n",
    "    warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "    # But we do want to show what's happening under the hood!\n",
    "    logging.basicConfig(level=logging.WARNING, format=\"%(asctime)s [%(levelname)s] %(message)s\")\n",
    "    logging.getLogger(\"aurora\").setLevel(logging.INFO)\n",
    "\n",
    "    foundry_client = FoundryClient(\n",
    "        endpoint=os.environ[\"FOUNDRY_ENDPOINT\"],\n",
    "        token=os.environ[\"FOUNDRY_TOKEN\"],\n",
    "    )\n",
    "    channel = BlobStorageChannel(os.environ[\"BLOB_URL_WITH_SAS\"])\n",
    "\n",
    "    predictions = list(\n",
    "        submit(\n",
    "            batch,\n",
    "            model_name=\"aurora-0.25-pretrained\",\n",
    "            num_steps=2,\n",
    "            foundry_client=foundry_client,\n",
    "            channel=channel,\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "923686c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots(2, 2, figsize=(12, 6.5))\n",
    "\n",
    "for i in range(ax.shape[0]):\n",
    "    pred = preds[i]\n",
    "\n",
    "    ax[i, 0].imshow(pred.surf_vars[\"2t\"][0, 0].numpy() - 273.15, vmin=-50, vmax=50)\n",
    "    ax[i, 0].set_ylabel(str(pred.metadata.time[0]))\n",
    "    if i == 0:\n",
    "        ax[i, 0].set_title(\"Aurora Prediction\")\n",
    "    ax[i, 0].set_xticks([])\n",
    "    ax[i, 0].set_yticks([])\n",
    "\n",
    "    ax[i, 1].imshow(surf_vars_ds[\"ts\"][2 + i].values - 273.15, vmin=-50, vmax=50)\n",
    "    if i == 0:\n",
    "        ax[i, 1].set_title(\"ERA5\")\n",
    "    ax[i, 1].set_xticks([])\n",
    "    ax[i, 1].set_yticks([])\n",
    "\n",
    "plt.tight_layout()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (Aurora)",
   "language": "python",
   "name": "aurora_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
